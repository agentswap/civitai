/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "assignedERC20Token(uint256)": FunctionFragment;
    "assignedERC721Token(uint256)": FunctionFragment;
    "deployNewERC20Token(uint256,string,string,uint8,uint256)": FunctionFragment;
    "deployNewERC721Token(uint256,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assignedERC20Token"
      | "assignedERC721Token"
      | "deployNewERC20Token"
      | "deployNewERC721Token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignedERC20Token",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignedERC721Token",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewERC20Token",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewERC721Token",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignedERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignedERC721Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewERC721Token",
    data: BytesLike
  ): Result;

  events: {
    "ERC20TokenCreated(uint256,address)": EventFragment;
    "ERC721TokenCreated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721TokenCreated"): EventFragment;
}

export interface ERC20TokenCreatedEventObject {
  modelId: BigNumber;
  tokenAddress: string;
}
export type ERC20TokenCreatedEvent = TypedEvent<
  [BigNumber, string],
  ERC20TokenCreatedEventObject
>;

export type ERC20TokenCreatedEventFilter =
  TypedEventFilter<ERC20TokenCreatedEvent>;

export interface ERC721TokenCreatedEventObject {
  modelId: BigNumber;
  tokenAddress: string;
}
export type ERC721TokenCreatedEvent = TypedEvent<
  [BigNumber, string],
  ERC721TokenCreatedEventObject
>;

export type ERC721TokenCreatedEventFilter =
  TypedEventFilter<ERC721TokenCreatedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assignedERC20Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assignedERC721Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployNewERC20Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployNewERC721Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  assignedERC20Token(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  assignedERC721Token(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  deployNewERC20Token(
    modelId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployNewERC721Token(
    modelId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assignedERC20Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    assignedERC721Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNewERC20Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNewERC721Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ERC20TokenCreated(uint256,address)"(
      modelId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: null
    ): ERC20TokenCreatedEventFilter;
    ERC20TokenCreated(
      modelId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: null
    ): ERC20TokenCreatedEventFilter;

    "ERC721TokenCreated(uint256,address)"(
      modelId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: null
    ): ERC721TokenCreatedEventFilter;
    ERC721TokenCreated(
      modelId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: null
    ): ERC721TokenCreatedEventFilter;
  };

  estimateGas: {
    assignedERC20Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignedERC721Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployNewERC20Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployNewERC721Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignedERC20Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignedERC721Token(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployNewERC20Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployNewERC721Token(
      modelId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
